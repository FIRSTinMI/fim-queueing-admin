@using Firebase.Database
@using fim_queueing_admin.Data
@inject FirebaseClient Client
@inject FimDbContext DbContext
@inject GlobalState State
@{
  ViewData["Title"] = "Events";

  var now = DateTime.UtcNow;

  var carts = DbContext.Carts.ToDictionary(c => c.Id, c => c.Name);

  async Task CartTemplate(Guid? cartId)
  {
    <a asp-controller="Cart" asp-action="Manage" asp-route-id="@cartId">
      @((cartId is not null && carts.TryGetValue(cartId.Value, out var cartName) ? cartName : null) ?? "")
    </a>
  }
  
  async Task TableTemplate(IEnumerable<FirebaseObject<DbEvent>> events)
  {
    <table class="table">
      <thead>
      <tr>
        <th>Event key</th>
        <th>Event code</th>
        <th>Name</th>
        <th>Field</th>
        <th>Status</th>
        <th>Starts</th>
        <th>Ends</th>
        <th>Actions</th>
      </tr>
      </thead>
      <tbody>
      @foreach (var evt in events)
      {
        var start = evt.Object.start;
        var end = evt.Object.end;
        var state = evt.Object.state.ToString();
        state += evt.Object.state switch {
          EventState.QualsInProgress =>
            $" ({evt.Object.currentMatchNumber.ToString() ?? "?"}/{evt.Object.numQualMatches.ToString() ?? "?"})",
          EventState.PlayoffsInProgress => $"({evt.Object.playoffMatchNumber ?? "?"})",
          _ => ""
        };
        <tr class="@(start < now && end > now ? "table-success" : "")">
          <td data-key="@evt.Key" class="event-key"></td>
          <td>@evt.Object.eventCode</td>
          <td>@evt.Object.name</td>
          <td>@{ await CartTemplate(evt.Object.cartId); }</td>
          <td>@state</td>
          <td>@(start?.DateTime.ToShortDateString())</td>
          <td>@(end?.DateTime.ToShortDateString())</td>
          <td><a asp-action="Manage" asp-route-id="@evt.Key">Manage</a></td>
        </tr>
      }
      </tbody>
    </table>
  }

  bool IsActive(FirebaseObject<DbEvent> x) => x.Object.start < now && x.Object.end > now;
}

<div class="container">
  <div class="text-center">
    <h1 class="display-4">Events</h1>
  </div>
  @{
    var events = await Client.Child($"/seasons/{State.CurrentSeason}/events")
      .OnceAsync<DbEvent>();
    var orderedEvents = events.OrderBy(x => x.Object.start)
      .ThenBy(x => x.Object.field).ToList();
  }
  @if (!events.Any())
  {
    <p>No events in this season yet...</p>
  }
  else
  {
    <button class="btn btn-link p-0" onclick="toggleEventKeys()">Show Keys</button>
    <div>
      <h2>Happening Now</h2>
      @{
        var currentEvents = orderedEvents.Where(IsActive).ToList();
        if (!currentEvents.Any())
        {
          <p>No events are currently happening... Take a break.</p>
        }
        else
        {
          <table class="table">
            <thead>
            <tr>
              <th>Event key</th>
              <th>Event code</th>
              <th>Name</th>
              <th>Field</th>
              <th>Status</th>
              <th>Videos</th>
              <th>Ends</th>
              <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var evt in currentEvents)
            {
              var start = evt.Object.start;
              var end = evt.Object.end;
              var state = evt.Object.state.ToString();
              state += evt.Object.state switch {
                EventState.QualsInProgress =>
                  $" ({evt.Object.currentMatchNumber.ToString() ?? "?"}/{evt.Object.numQualMatches.ToString() ?? "?"})",
                EventState.PlayoffsInProgress => $"({evt.Object.playoffMatchNumber ?? "?"})",
                _ => ""
              };
              <tr class="@(start < now && end > now ? "table-success" : "")">
                <td data-key="@evt.Key" class="event-key"></td>
                <td>@evt.Object.eventCode</td>
                <td>@evt.Object.name</td>
                <td>@{ await CartTemplate(evt.Object.cartId); }</td>
                <td>@state</td>
                <td>
                  <span class="video-status" data-event-code="@evt.Object.eventCode">Loading...</span>
                </td>
                <td>@(end?.DateTime.ToShortDateString())</td>
                <td><a asp-action="Manage" asp-route-id="@evt.Key">Manage</a></td>
              </tr>
            }
            </tbody>
          </table>
        }
      }

      <h2>Future and Past</h2>
      @{ await TableTemplate(orderedEvents.Where(x => !IsActive(x))); }
    </div>
  }
</div>

@section Scripts
{
  <script>
    document.querySelectorAll(".video-status").forEach(async el => {
      fetch("/Event/GetEventVideoStatus/" + el.dataset.eventCode).then(async resp => {
        el.innerHTML = await resp.text();
      });
    });
    
    window.showEventKeys = true;
    function toggleEventKeys(evt) {
      window.showEventKeys = !window.showEventKeys;
      if (evt) {
        evt.target.innerText = `${window.showEventKeys ? 'Hide' : 'Show'} Keys`;
      }
      document.querySelectorAll(".event-key").forEach(el => {
        el.innerHTML = window.showEventKeys ? el.dataset["key"] : "\u2022".repeat(5);
      });
    }
    toggleEventKeys();
  </script>
}
