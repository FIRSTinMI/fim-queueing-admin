@using Firebase.Database
@using fim_queueing_admin.Services
@inject FirebaseClient Client
@inject GlobalState State
@* @inject MatchVideosService MatchVideosService *@
@{
  ViewData["Title"] = "Events";

  var now = DateTime.UtcNow;
  
  async Task TableTemplate(IEnumerable<FirebaseObject<DbEvent>> events)
  {
    <table class="table">
      <thead>
      <tr>
        <th>Event key</th>
        <th>Event code</th>
        <th>Name</th>
        <th>Field</th>
        <th>Status</th>
        <th>Starts</th>
        <th>Ends</th>
        <th>Actions</th>
      </tr>
      </thead>
      <tbody>
      @foreach (var evt in events)
      {
        var start = evt.Object.start;
        var end = evt.Object.end;
        var state = evt.Object.state.ToString();
        state += evt.Object.state switch {
          EventState.QualsInProgress =>
            $" ({evt.Object.currentMatchNumber.ToString() ?? "?"}/{evt.Object.numQualMatches.ToString() ?? "?"})",
          EventState.PlayoffsInProgress => $"({evt.Object.playoffMatchNumber ?? "?"})",
          _ => ""
        };
        <tr class="@(start < now && end > now ? "table-success" : "")">
          <td>@evt.Key</td>
          <td>@evt.Object.eventCode</td>
          <td>@evt.Object.name</td>
          <td>@(evt.Object.field.ToString() ?? "")</td>
          <td>@state</td>
          <td>@(start?.DateTime.ToShortDateString())</td>
          <td>@(end?.DateTime.ToShortDateString())</td>
          <td><a asp-action="Manage" asp-route-id="@evt.Key">Manage</a></td>
        </tr>
      }
      </tbody>
    </table>
  }

  bool IsActive(FirebaseObject<DbEvent> x) => x.Object.start < now && x.Object.end > now;
}

<div class="container">
  <div class="text-center">
    <h1 class="display-4">Events</h1>
  </div>
  @{
    var events = await Client.Child($"/seasons/{State.CurrentSeason}/events")
      .OnceAsync<DbEvent>();
    var orderedEvents = events.OrderBy(x => x.Object.start)
      .ThenBy(x => x.Object.field).ToList();
  }
  @if (!events.Any())
  {
    <p>No events in this season yet...</p>
  }
  else
  {
    <div>
      <h2>Happening Now</h2>
      @{
        var currentEvents = orderedEvents.Where(IsActive).ToList();
        if (!currentEvents.Any())
        {
          <p>No events are currently happening... Take a break.</p>
        }
        else
        {
          // var eventVideoModels = await MatchVideosService.GetVideosForEvents(State.CurrentSeason, 
          //   (IEnumerable<string>)currentEvents.Select(x => x.Object.eventCode)
          //     .Where(x => !string.IsNullOrEmpty(x)));
          <table class="table">
            <thead>
            <tr>
              <th>Event key</th>
              <th>Event code</th>
              <th>Name</th>
              <th>Field</th>
              <th>Status</th>
              <th>Videos</th>
              <th>Ends</th>
              <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var evt in currentEvents)
            {
              var start = evt.Object.start;
              var end = evt.Object.end;
              var state = evt.Object.state.ToString();
              state += evt.Object.state switch {
                EventState.QualsInProgress =>
                  $" ({evt.Object.currentMatchNumber.ToString() ?? "?"}/{evt.Object.numQualMatches.ToString() ?? "?"})",
                EventState.PlayoffsInProgress => $"({evt.Object.playoffMatchNumber ?? "?"})",
                _ => ""
              };
              // MatchVideosService.MatchVideosModel? videos = null;
              // if (!string.IsNullOrEmpty(evt.Object.eventCode))
              // {
              //   eventVideoModels.TryGetValue(evt.Object.eventCode, out videos); 
              // }
              <tr class="@(start < now && end > now ? "table-success" : "")">
                <td>@evt.Key</td>
                <td>@evt.Object.eventCode</td>
                <td>@evt.Object.name</td>
                <td>@(evt.Object.field.ToString() ?? "")</td>
                <td>@state</td>
                <td>
                  <span class="video-status" data-event-code="@evt.Object.eventCode">Loading...</span>
                </td>
                <td>@(end?.DateTime.ToShortDateString())</td>
                <td><a asp-action="Manage" asp-route-id="@evt.Key">Manage</a></td>
              </tr>
            }
            </tbody>
          </table>
        }
      }

      <h2>Future and Past</h2>
      @{ await TableTemplate(orderedEvents.Where(x => !IsActive(x))); }
    </div>
  }
</div>

@section Scripts
{
  <script>
    document.querySelectorAll(".video-status").forEach(async el => {
      fetch("/Event/GetEventVideoStatus/" + el.dataset.eventCode).then(async resp => {
        el.innerHTML = await resp.text();
      });
    });
  </script>
}
